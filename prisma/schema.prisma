// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(uuid())
  name      String?
  email     String?        @unique
  password  String?        @db.VarChar(255)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  imgUrl    String?
  debts     CustomerDebt[] // Relación con CustomerDebt 
  reviews   Review[]       // Relación con Review de uno a muchos un usuario puede tener muchos reviews
  favorites Favorite[]     // Relación con Favorite de uno a muchos un usuario puede tener muchos favoritos
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categorie   Category @relation(fields: [categorieId], references: [id])
  categorieId String
  imgUrl      String?
  reviews     Review[]  // Relación con Review de uno a muchos un producto puede tener muchos reviews
  favorites   Favorite[] // Relación con Favorite de uno a muchos un producto puede estar en muchos favoritos
}

model Review {
  id String @id @default(uuid())
  user_id String
  user User @relation( fields: [user_id], references: [id])
  product_id String
  product Product @relation( fields: [product_id], references: [id])
  rating Int
  comment String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CustomerDebt {
  id          String   @id @default(uuid())
  user_id     String
  description String
  amount      Float
  Date        DateTime @default(now())
  condition   String   @default("pendiente") // Puede ser "pendiente", "pagada", "vencida"
  // Relación con usuario
  user        User     @relation(fields: [user_id], references: [id])
}

model Favorite {
  id        String   @id @default(uuid())
  user_id   String
  product_id String
  user      User     @relation(fields: [user_id], references: [id])
  product   Product  @relation(fields: [product_id], references: [id])
  createdAt DateTime @default(now())
}
